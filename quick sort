#include <stdio.h>

#define N 7

void swap(int *a, int *b) {
  int temp = *a;
  *a = *b;
  *b = temp;
}

int partition(int array[], int left, int right) {
  
  int pivot = array[right];
  
  int i = (left - 1);

  // compare with pivot
  for (int j = left; j < right; j++) {
    if (array[j] <= pivot) {
        
        i++;
      
        swap(&array[i], &array[j]);
    }
  }

  // swap the pivot element with the greater element at i
  swap(&array[i + 1], &array[right]);
  
  return (i + 1);
}

void quickSort(int array[], int left, int right) {
  if (left < right) {
    
    // find the pivot element such that
    int pi = partition(array, left, right);
    
    quickSort(array, left, pi - 1);
    
    quickSort(array, pi + 1, right);
  }
}

void printArray(int array[], int size) {
  for (int i = 0; i < size; ++i) {
    printf("%d  ", array[i]);
  }
  printf("\n");
}



// main function
int main() {
  int list[N] = {8, 7, 2, 1, 0, 9, 6};
  
  int n = sizeof(list) / sizeof(list[0]);
  
  quickSort(list, 0, n - 1);
  
  printf("Sorted array: \n");
  printArray(list, n);
}
